#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bot de Telegram para interactuar con el sistema multiagente de an√°lisis de TDR.
"""

import time
import logging
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import re 
from config.settings import TELEGRAM_BOT_TOKEN
from core.state import TDRAgentState
from core.execution_tracker import reset_execution_path, get_execution_path, execution_path
from graph.builder import build_tdr_agent
from visualization.flow_diagram import generar_diagrama_flujo
from tools.evaluation_tools import generate_proposal_summary , filename
from langchain_core.messages import SystemMessage
from config.settings import SYSTEM_PROMPT
from datetime import datetime
import glob
# Configuraci√≥n del logger
logger = logging.getLogger("TDR_Agente_LangGraph")
def buscar_archivo_mas_cercano():
    # Obtener hora actual
    hora_actual = datetime.now()
    
    # Buscar todos los archivos con el formato espec√≠fico
    patron_busqueda = os.path.join("propuestas", "Propuesta_TDR_*.txt")
    archivos = glob.glob(patron_busqueda)
    
    mejor_archivo = None
    menor_diferencia = float('inf')
    
    # Patr√≥n para extraer la fecha y hora del nombre del archivo
    patron_fecha = re.compile(r'Propuesta_TDR_(\d{14})\.txt$')
    
    for archivo in archivos:
        # Extraer la fecha del nombre del archivo
        match = patron_fecha.search(archivo)
        if match:
            fecha_str = match.group(1)
            try:
                # Convertir a objeto datetime
                fecha_archivo = datetime.strptime(fecha_str, "%Y%m%d%H%M%S")
                
                # Calcular diferencia en segundos con la hora actual
                diferencia = abs((fecha_archivo - hora_actual).total_seconds())
                
                # Actualizar si encontramos una diferencia menor
                if diferencia < menor_diferencia:
                    menor_diferencia = diferencia
                    mejor_archivo = archivo
            except ValueError:
                continue
    
    return mejor_archivo
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Mensaje de bienvenida del bot.
    
    Args:
        update: Actualizaci√≥n de Telegram
        context: Contexto de Telegram
    """
    keyboard = [
        [InlineKeyboardButton("Informaci√≥n del Sistema", callback_data="info")],
        [InlineKeyboardButton("Requisitos del TDR", callback_data="requirements")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "ü§ñ *Bienvenido al Bot de An√°lisis de TDR y Generaci√≥n de Propuestas T√©cnicas*\n\n"
        "Este bot utiliza un sistema multiagente con LangGraph y Ollama para procesar T√©rminos de Referencia "
        "y generar propuestas t√©cnicas profesionales seg√∫n los requisitos del documento PKS-537 RQ-01.\n\n"
        "Para comenzar, env√≠a un archivo PDF con el TDR que deseas analizar.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Maneja los callbacks de los botones inline.
    
    Args:
        update: Actualizaci√≥n de Telegram
        context: Contexto de Telegram
    """
    query = update.callback_query
    await query.answer()
    
    if query.data == "info":
        await query.message.reply_text(
            "‚ÑπÔ∏è *Informaci√≥n del Sistema*\n\n"
            "Este sistema multiagente est√° compuesto por 6 agentes especializados:\n\n"
            "1Ô∏è‚É£ *Agente Extractor*: Extrae texto de documentos PDF\n"
            "2Ô∏è‚É£ *Agente Analista*: Analiza el TDR para extraer informaci√≥n clave\n"
            "3Ô∏è‚É£ *Agente Estructurador*: Crea el √≠ndice para la propuesta t√©cnica\n"
            "4Ô∏è‚É£ *Agente Redactor*: Genera el contenido para cada secci√≥n\n"
            "5Ô∏è‚É£ *Agente Integrador*: Combina todas las secciones en un documento final\n"
            "6Ô∏è‚É£ *Agente Evaluador*: Valida la calidad de la propuesta\n\n"
            "El modelo utilizado es: `deepseek-r1:1.5b:32b`",
            parse_mode="Markdown"
        )
    elif query.data == "requirements":
        await query.message.reply_text(
            "üìã *Requisitos del Documento PKS-537 RQ-01*\n\n"
            "Las propuestas t√©cnicas deben incluir obligatoriamente:\n\n"
            "1. Introducci√≥n y contexto del proyecto\n"
            "2. Objetivos (general y espec√≠ficos)\n"
            "3. Alcance detallado del trabajo\n"
            "4. Metodolog√≠a propuesta\n"
            "5. Plan de trabajo y cronograma\n"
            "6. Entregables con descripci√≥n detallada\n"
            "7. Recursos humanos y t√©cnicos asignados\n"
            "8. Gesti√≥n de riesgos\n"
            "9. Plan de calidad\n"
            "10. Normativas y est√°ndares aplicables\n"
            "11. Experiencia relevante en proyectos similares\n"
            "12. Anexos t√©cnicos",
            parse_mode="Markdown"
        )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Procesa el archivo PDF recibido y ejecuta el flujo de trabajo.
    
    Args:
        update: Actualizaci√≥n de Telegram
        context: Contexto de Telegram
    """
    # Verificar que sea un PDF
    document = update.message.document
    if document.mime_type != "application/pdf":
        await update.message.reply_text("‚ùå Por favor, env√≠a un archivo PDF.")
        return
    
    # Informar al usuario que se inicia el procesamiento
    progress_message = await update.message.reply_text(
        "üìÑ PDF recibido. Iniciando el an√°lisis...\n\n"
        "0% ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë"
    )
    
    try:
        # Limpiar el historial de ejecuci√≥n
        reset_execution_path()
        
        # Descargar el PDF
        file = await document.get_file()
        file_path = f"tdr_{int(time.time())}.pdf"
        pdf_file = await file.download_to_drive(custom_path=file_path)
        logger.info(f"PDF recibido y guardado en: {file_path}")
        
        # Actualizar mensaje de progreso
        await progress_message.edit_text(
            "üìÑ PDF recibido y guardado.\n\n"
            "20% ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë"
        )
        
        # Crear el agente
        agent = build_tdr_agent()
        logger.info("Agente TDR construido exitosamente")
        
        # Inicializar el estado con mensajes y la ruta del PDF
        state = {
            "messages": [SystemMessage(content=SYSTEM_PROMPT)],
            "next_step": "extract_text",
            "pdf_path": file_path
        }
        
        # Informar al usuario que se est√° extrayendo el texto
        await progress_message.edit_text(
            "üîç Extrayendo texto del PDF...\n\n"
            "40% ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë"
        )
        
        # Invocar al agente para comenzar el procesamiento
        result = agent.invoke(state)
        logger.info("Procesamiento del TDR completado")
        
        # Actualizar mensaje de progreso
        await progress_message.edit_text(
            "‚úÖ Procesamiento completado.\n\n"
            "100% ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà"
        )
        print("AQUIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII",result)
        
        # Tercero: Mostrar resultados de la evaluaci√≥n (no depende del archivo)
        if "evaluation" in result:
            try:
                eval_dict = json.loads(result["evaluation"])
                status = eval_dict.get("status", "completado")
                puntuacion = eval_dict.get("puntuacion", "N/A")
                
                # Generar resumen ejecutivo si est√° disponible
                summary = "No disponible"
                summary = generate_proposal_summary(result["evaluation"])
                if summary.startswith("Error:"):
                    summary = "No se pudo generar el resumen ejecutivo."
                
                # Limpiar el resumen si contiene etiquetas "think"
                if "<think>" in summary:
                    summary = summary.split("</think>", 1)[-1].strip()
                
                # Limitar la longitud del resumen
                if len(summary) > 200:
                    summary = summary[:200] + "..."
                
                # Calcular cumplimiento de requisitos
                cumplimiento = eval_dict.get("cumplimiento_requisitos", {})
                total_reqs = len(cumplimiento)
                cumplidos = sum(1 for val in cumplimiento.values() if val)
                porcentaje = int((cumplidos / total_reqs) * 100) if total_reqs > 0 else 0
                
                # MENSAJE 1: Informaci√≥n b√°sica
                message1 = (
                    f"‚úÖ *Propuesta T√©cnica Generada*\n\n"
                    f"üìä *Evaluaci√≥n:*\n"
                    f"‚Ä¢ Estado: {status.upper()}\n"
                    f"‚Ä¢ Puntuaci√≥n: {puntuacion}/10\n"
                    f"‚Ä¢ Cumplimiento: {porcentaje}% ({cumplidos}/{total_reqs} requisitos)"
                )
                
                await update.message.reply_text(message1, parse_mode="Markdown")
                
                # MENSAJE 2: Fortalezas y debilidades
                fortalezas = "\n".join([f"‚Ä¢ {item}" for item in eval_dict.get("fortalezas", ["No especificadas."])[:2]])
                debilidades = "\n".join([f"‚Ä¢ {item}" for item in eval_dict.get("debilidades", ["No especificadas."])[:2]])
                
                message2 = (
                    f"üí™ *Principales fortalezas:*\n{fortalezas}\n\n"
                    f"üîç *√Åreas de mejora:*\n{debilidades}"
                )
                
                await update.message.reply_text(message2, parse_mode="Markdown")
                
                # MENSAJE 3: Resumen y archivo
                message3 = f"üìù *Resumen ejecutivo:*\n{summary}\n\n"
                
                
                
                
                
                await update.message.reply_text(message3, parse_mode="Markdown")
                
                # MENSAJE 4: Recomendaciones si las hay
                if "recomendaciones" in eval_dict and eval_dict["recomendaciones"]:
                    recomendaciones = "\n".join([f"‚Ä¢ {item}" for item in eval_dict["recomendaciones"][:3]])
                    message4 = f"üìå *Recomendaciones:*\n{recomendaciones}"
                    await update.message.reply_text(message4, parse_mode="Markdown")
                
            except json.JSONDecodeError:
                await update.message.reply_text(
                    "‚úÖ Propuesta generada y evaluada.",
                    parse_mode="Markdown"
                )
        else:
            await update.message.reply_text(
                "‚úÖ Procesamiento completado, pero no se gener√≥ una evaluaci√≥n.",
                parse_mode="Markdown"
            )
        
        # Cuarto: Enviar el archivo SOLO si existe
    
        try:
            archivo_cercano = buscar_archivo_mas_cercano()
            if archivo_cercano:
                with open(archivo_cercano, "rb") as f:
                    await update.message.reply_document(
                        document=f, 
                        filename=filename,
                        caption="üìÑ Propuesta T√©cnica (Formato TXT)"
                    )
                logger.info(f"Archivo enviado: {filename}")
            else:
                logger.warning(f"Archivo no encontrado: {filename}")
                await update.message.reply_text(
                    "‚ö†Ô∏è El archivo de propuesta existe pero no pudo ser localizado exactamente. "
                    "Verifique manualmente en la carpeta del proyecto.",
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"Error al enviar archivo: {str(e)}")
            await update.message.reply_text(f"‚ö†Ô∏è Error al enviar el archivo: {str(e)[:100]}...")
        
        
        # Quinto: Generar y enviar el diagrama del flujo (independiente del archivo)
        try:
            diagram_path = generar_diagrama_flujo()
            with open(diagram_path, "rb") as f:
                await update.message.reply_photo(
                    photo=f, 
                    caption="üìä Diagrama del flujo de trabajo del sistema multiagente"
                )
            logger.info(f"Diagrama enviado: {diagram_path}")
        except Exception as e:
            logger.error(f"Error al generar o enviar diagrama: {str(e)}")
            
    except Exception as e:
        logger.error(f"Error en el procesamiento: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå *Error en el procesamiento*\n\n{str(e)}",
            parse_mode="Markdown"
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Muestra un mensaje de ayuda con instrucciones de uso.
    
    Args:
        update: Actualizaci√≥n de Telegram
        context: Contexto de Telegram
    """
    help_text = (
        "üîç *Instrucciones de uso*\n\n"
        "*Comandos disponibles:*\n"
        "/start - Iniciar el bot y ver mensaje de bienvenida\n"
        "/help - Mostrar este mensaje de ayuda\n"
        "/status - Ver estado del sistema\n\n"
        "*C√≥mo usar el bot:*\n"
        "1. Env√≠a un archivo PDF con el T√©rmino de Referencia (TDR)\n"
        "2. El sistema procesar√° autom√°ticamente el documento\n"
        "3. Recibir√°s la propuesta t√©cnica generada seg√∫n los requisitos PKS-537 RQ-01\n\n"
        "*Formato de la propuesta:*\n"
        "La propuesta generada incluir√° todas las secciones requeridas por PKS-537 RQ-01."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Muestra el estado actual del sistema y estad√≠sticas.
    
    Args:
        update: Actualizaci√≥n de Telegram
        context: Contexto de Telegram
    """
    # Obtener el historial de ejecuci√≥n para mostrar estad√≠sticas
    execution_path = get_execution_path()
    
    # Contar cu√°ntas veces se ha ejecutado cada nodo
    node_counts = {}
    for step in execution_path:
        node = step.get("node", "unknown")
        node_counts[node] = node_counts.get(node, 0) + 1
    
    # Formatear las estad√≠sticas
    stats = "\n".join([f"‚Ä¢ {node}: {count} veces" for node, count in node_counts.items()])
    
    status_text = (
        "üñ•Ô∏è *Estado del Sistema*\n\n"
        f"‚Ä¢ Modelo en uso: `deepseek-r1:1.5b:32b`\n"
        f"‚Ä¢ Sistema operativo: Activo\n"
        f"‚Ä¢ Pasos de ejecuci√≥n registrados: {len(execution_path)}\n\n"
        f"*Estad√≠sticas de ejecuci√≥n:*\n{stats if stats else '‚Ä¢ No hay datos de ejecuci√≥n disponibles'}"
    )
    await update.message.reply_text(status_text, parse_mode="Markdown")

def start_bot():
    """Iniciar el bot de Telegram"""
    logger.info("Iniciando bot de Telegram")
    
    # Crear la aplicaci√≥n
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # A√±adir handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.Document.PDF, handle_document))
    
    # Iniciar polling
    application.run_polling()
    logger.info("Bot iniciado. Esperando mensajes...")